# Default values for mediator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/openwallet-foundation/didcomm-mediator-credo/mediator
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: 
    # route.openshift.io/termination: edge
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# This block is for setting up the network policy more information can be found here: https://kubernetes.io/docs/concepts/services-networking/network-policies/
# Network policies are responsible for allowing ingress traffic to the mediator, and access to the database from the mediator.
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    namespaceSelector: []
    ## Example:
    # network.openshift.io/policy-group: ingress
    podSelector: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

environment:
  # This is for setting up environment variables more information can be found here: https://kubernetes.io/docs/concepts/configuration/overview/
  - name: AGENT_PORT
    value: "3000"
  - name: AGENT_NAME
    value: Mediator
  - name: WALLET_NAME
    value: mediator-wallet
  - name: POSTGRES_USER
    value: mediator
  - name: POSTGRES_HOST
    value: mediator-credo-db
  - name: POSTGRES_ADMIN_USER
    value: postgres
  - name: AGENT_ENDPOINTS
    value: "https://example.com,wss://example.com"
  - name: LOG_LEVEL
    value: "2"
  - name: POSTGRES_PASSWORD
    valueFrom:
      secretKeyRef:
        name: mediator-credo-db
        key: password
  - name: POSTGRES_ADMIN_PASSWORD
    valueFrom:
      secretKeyRef:
        name: mediator-credo-db
        key: postgres-password

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: cache-volume
    emptyDir:
      sizeLimit: 1Gi 

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: cache-volume
    mountPath: /.cache

nodeSelector: {}

tolerations: []

affinity: {}

# Settings related to the PostgreSQL database
postgresql:
  commonLabels: {}
  # Example:
  # app.kubernetes.io/name: postgresql
  # app.kubernetes.io/instance: mediator-credo-db
  primary:
    service:
      ports:
        postgresql: 5432
